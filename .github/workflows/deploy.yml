name: Deploy to Railway

on:
  push:
    branches: [main]

jobs:
  helloworld:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Imprimir en consola
        run: echo "Hello World, Github Actions"

  test:
    needs: helloworld
    runs-on: ubuntu-latest
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      USER_COLLECTION: ${{ secrets.USER_COLLECTION }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIREBASE_CREDENTIALS_BASE64: ${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install libraries
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Write Firebase credentials to file (if provided)
        if: ${{ env.FIREBASE_CREDENTIALS_BASE64 != '' }}
        run: |
          echo "$FIREBASE_CREDENTIALS_BASE64" | base64 --decode > ./firebase_credentials.json
          echo "FIREBASE_CRED_PATH=$(pwd)/firebase_credentials.json" >> $GITHUB_ENV

      - name: Debug env presence (opcional)
        run: |
          python - <<'PY'
          import os
          keys = ["DATABASE_NAME","MONGODB_URI","FIREBASE_CREDENTIALS_BASE64","FIREBASE_CRED_PATH","RAILWAY_TOKEN"]
          for k in keys:
              print(k, "->", bool(os.environ.get(k)))
          PY

      - name: Test FastApi imports
        run: |
          python -c "from main import app; print('FASTAPI app imported successfully')"

      - name: Run tests
        run: |
          pytest test_database.py

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      - name: Install Railway CLI
        run: |
          # Use the official Railway CLI installation method with retry
          curl -fsSL https://railway.app/install.sh | sh || {
            echo "First install attempt failed, trying alternative method..."
            # Alternative: Download from Github releases (latest)
            curl -L https://github.com/railwayapp/cli/releases/latest/download/railway-linux-x86_64.tar.gz -o railway.tar.gz
            tar -xzf railway.tar.gz
            sudo mv railway /usr/local/bin/
            chmod +x /usr/local/bin/railway
          }

          # Add to PATH if using first method 
          if [ -d "$HOME/.railway/bin" ]; then
            echo "$HOME/.railway/bin" >> $GITHUB_PATH
            export PATH="$HOME/.railway/bin:$PATH"
          fi

          # Verify installation
          railway --version || railway version || echo "Railway CLI installed but version check failed"

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "starting deployment..."
          railway up --service "Altus-api" || \
          railway up --service Altus-api || \
          railway up --service web || \
          railway up --service api || \
          railway up --service app || \
          railway up --service Altus || \
          railway up --service backend || \
          (echo "creating new service and deploying" && railway up)

          